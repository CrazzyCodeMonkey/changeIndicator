/**
 * @summary     changeIndicator
 * @description Updates form classes to indicate field value changes
 * @file        jquery.changeIndicator.js
 * @version     1.0.1
 * @author      Trace Sinclair
**/

(function($){"use strict";var config={$self:null,fieldChange:"",fieldContainer:"",fieldSelector:":input[name]",buttonSelector:"input[type='submit'],button[type='submit']",buttonChangeClass:"",trackingField:true,trackingFieldName:"__ChangeIndicator",trackingFieldType:"hidden",debug:false,debugClass:"debug"};var methods={init:function(options){config.$self=this;config=$.extend(config,options);$(config.$self).data("changed",{});var fieldNames=methods.getAllFieldNames($(config.$self).find(config.fieldSelector));for(var f in fieldNames){var sVal=methods.getFieldVal(fieldNames[f]);$("[name='"+fieldNames[f]+"']").each(function(){$(this).data("orig",sVal);});}if(config.trackingField){if($(config.$self).find(config.trackingFieldName).length>0){throw"changeIndicator: "+config.trackingFieldName+" field already exists in form";}$(config.$self).append($("<input />").attr("name",config.trackingFieldName).attr("id",config.trackingFieldName).attr("type",config.trackingFieldType));}$(config.$self).on("reset change",function(event){var changeList="";if(event.type=="reset"){$(config.$self).find("."+config.fieldChange).removeClass(config.fieldChange);$(config.$self).data("changed",{});}else{changeList=methods.getKeys($(config.$self).data("changed")).join(",");}if(config.trackingField){$("#"+config.trackingFieldName).val(changeList);}if(changeList==""){$(config.$self).find(config.buttonSelector).removeClass(config.buttonChangeClass);}else{$(config.$self).find(config.buttonSelector).addClass(config.buttonChangeClass);}});$(config.$self).on("change keyup",config.fieldSelector,function(){if($(this).data("orig")!=methods.getFieldVal($(this).attr("name"))){if(config.fieldContainer==""){$(this).addClass(config.fieldChange);}else{$(this).closest(config.fieldContainer).addClass(config.fieldChange);}var changed=$(config.$self).data("changed");changed[$(this).attr("name")]=true
$(config.$self).data("changed",changed);}else{if(config.fieldContainer==""){$(this).removeClass(config.fieldChange);}else{$(this).closest(config.fieldContainer).removeClass(config.fieldChange);}var changed=$(config.$self).data("changed");delete changed[$(this).attr("name")];$(config.$self).data("changed",changed);}$(config.$self).trigger("change");});return this;},getFieldVal:function(_fieldName){var aFieldVals=[];$(config.$self).find("[name='"+_fieldName+"']:checked,[name='"+_fieldName+"'][type!='radio'][type!='checkbox']").each(function(){aFieldVals.push($(this).val());});return aFieldVals.join(",");},getAllFieldNames:function($fields){var uFields={};$fields.each(function(){uFields[$(this).attr("name")]=true;if(config.debug)$(this).parent().addClass(config.debugClass);});return methods.getKeys(uFields);},getKeys:function(u){var akeys=[];for(var k in u){akeys.push(k);}return akeys;}};$.fn.changeIndicator=function(method){if(methods[method]){return methods[method].apply(this,Array.prototype.slice.call(arguments,1));}else if(typeof method==='object'||!method){return methods.init.apply(this,arguments);}else{$.error('Method '+method+' does not exist on jQuery.tooltip');}};})(jQuery);